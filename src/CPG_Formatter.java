
import java.awt.event.ActionEvent;
import java.io.*;
import java.util.Scanner;
import java.util.regex.Pattern;
import javax.swing.*;
import com.opencsv.CSVWriter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author dream
 */
public class CPG_Formatter extends javax.swing.JFrame {

    private String currentPath = "";

    /**
     * Creates new form CPG_Formatter
     */
    public CPG_Formatter() {
        initComponents();
        initEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dir = new javax.swing.JTextField();
        target = new javax.swing.JLabel();
        selectFolder = new javax.swing.JButton();
        format = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CPG Formatter");
        setResizable(false);

        target.setText("Target:");

        selectFolder.setText("Select Folder");

        format.setText("Format");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(target)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(format)
                .addContainerGap(205, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(target)
                    .addComponent(dir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(format)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initEvent() {
        selectFolder.addActionListener((ActionEvent e) -> {
            chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Select Forder");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                dir.setText(chooser.getSelectedFile().toString());
            }
        });
        format.addActionListener((ActionEvent e) -> {
            try {
                currentPath = new File(CPG_Formatter.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParent();
                if (!dir.getText().equalsIgnoreCase("")) {
                    final File folder = new File(dir.getText());
                    int res = JOptionPane.showConfirmDialog(null, "Format?");
                    if (res == JOptionPane.YES_OPTION) {
                        File parent = new File(currentPath + "/output/" + folder.getName());
                        if (!parent.isDirectory()) {
                            parent.mkdirs();
                        }
                        listFilesForFolder(folder);
                        JOptionPane.showMessageDialog(null, "Done!");
                        JOptionPane.showMessageDialog(null, "The output files in " + currentPath);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Select Folder!!!");
                }
            } catch (Exception ex) {
            }
        });
    }

    public void listFilesForFolder(final File folder) {
        try {
            FileWriter nodesFileWriter = new FileWriter(new File(currentPath + "/output/" + folder.getName() + "/nodes.csv"));
            FileWriter edgesFileWriter = new FileWriter(new File(currentPath + "/output/" + folder.getName() + "/edges.csv"));
            CSVWriter nodesCSVWriter = new CSVWriter(nodesFileWriter);
            CSVWriter edgesCSVWriter = new CSVWriter(edgesFileWriter);

            // Header column value
            String[] edgesHeader = {"start", "end", "type"};
            edgesCSVWriter.writeNext(edgesHeader);
            String[] nodesHeader = {"key", "type", "code"};
            nodesCSVWriter.writeNext(nodesHeader);

            for (final File fileEntry : folder.listFiles()) {
                if (fileEntry.isDirectory()) {
                    listFilesForFolder(fileEntry);
                } else {
                    FileInputStream fileInputStream = new FileInputStream(fileEntry.getPath());
                    Scanner scanner = new Scanner(fileInputStream);
                    while (scanner.hasNextLine()) {
                        String str = scanner.nextLine();
                        if (Pattern.matches(".+\\d+.\\s\\-\\>\\s.\\d+.+", str)) {
                            String[] temp = str.split("\" -> \"|\"  \\[ label = \"");
                            String[] edges = {temp[0].trim().substring(1), temp[1].substring(0, temp[1].length()),
                                temp[2].substring(0, (temp[2].length() - 5))};
                            edgesCSVWriter.writeNext(edges);
                        } else if (Pattern.matches(".\\d+.+", str) && !str.contains("\"\"")) {
                            String[] temp = str.split("\" \\[label = \"\\(");
                            String temp1 = temp[1].substring(temp[1].indexOf(",") + 1, (temp[1].length() - 4));
                            if (!temp1.equals(",")) {
                                int o = 0, c = 0, oi = 0;
                                boolean check = false;
                                for (int i = 0; i < temp1.length(); i++) {
                                    if (temp1.charAt(i) == '(') {
                                        o++;
                                    }
                                    if (temp1.charAt(i) == ')') {
                                        c++;
                                    }
                                    if (temp1.charAt(i) == '\"') {
                                        oi++;
                                    }
                                    if (temp1.charAt(i) == ',' && o == c && oi % 2 == 0) {
                                        String[] nodes = {temp[0].substring(1), temp[1].substring(0, temp[1].indexOf(",")),
                                            temp1.substring(0, i)};
                                        nodesCSVWriter.writeNext(nodes);
                                        check = true;
                                        break;
                                    }
                                }
                                if (!check) {
                                    String[] nodes = {temp[0].substring(1), temp[1].substring(0, temp[1].indexOf(",")),
                                        temp[1].substring(temp[1].indexOf(",") + 1, (temp[1].length() - 4))};
                                    nodesCSVWriter.writeNext(nodes);
                                }
                            }
                        }
                    }
                    scanner.close();
                    fileInputStream.close();
                }
            }
            nodesCSVWriter.close();
            edgesCSVWriter.close();
            nodesFileWriter.close();
            edgesFileWriter.close();
        } catch (Exception ex) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CPG_Formatter().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dir;
    private javax.swing.JButton format;
    private javax.swing.JButton selectFolder;
    private javax.swing.JLabel target;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JFileChooser chooser;
}
